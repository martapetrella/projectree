{"ast":null,"code":"import _toConsumableArray from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport default function cart(state, action) {\n  var a = action.payload;\n  var p = a ? a.list : false;\n  var ls = state.list ? state.list : [];\n  var submForList = ls && ls.length < 0 ? true : false;\n  var prod = p ? {\n    id: p.id,\n    network: p.network,\n    code: p.code,\n    name: p.name,\n    slug: p.slug,\n    lang: p.lang,\n    country: p.country,\n    currency: p.currency,\n    price: p.price,\n    oldprice: p.oldprice\n  } : false;\n\n  switch (action.type) {\n    case 'SET_CART':\n      return _objectSpread({}, state, {\n        list: a.list,\n        submitted: submForList\n      });\n\n    case 'SET_SUBMIT_STATUS':\n      return _objectSpread({}, state, {\n        submitted: a.submitted\n      });\n\n    case 'ADD_TO_CART':\n      // controllo se l'ID prodotto c'è già in lista\n      var alreadyInList = false;\n\n      for (var i = 0; i < ls.length; i++) {\n        if (ls[i].id === prod.id) {\n          alreadyInList = true;\n        }\n      }\n\n      if (alreadyInList) {\n        // Se c'è non fare nulla (per ora non gestiamo la QTY)\n        return state;\n      } else {\n        // Se NON c'è aggiungilo alla lista (o crea lista nuova se carrello è vuoto)\n        var firstProd = [prod]; // https://stackoverflow.com/questions/41364383/remove-duplicates-form-an-array/41364495\n\n        var prodInList = _toConsumableArray(new Set([].concat(_toConsumableArray(ls), [prod]).map(function (a) {\n          return a;\n        })));\n\n        return _objectSpread({}, state, {\n          list: ls ? prodInList : firstProd,\n          submitted: submForList\n        });\n      }\n\n    case 'REMOVE_FORM_CART':\n      var prodExist = -1; // metto a -1 perchè per me l'indice a zero è un valore true\n      // ciclo sulla lista prodotti  nello stato e controllo se c'è il prod corrente\n\n      for (i = 0; i < ls.length; i++) {\n        if (ls[i].id === a.list.id) {\n          prodExist = i;\n        }\n      }\n\n      if (prodExist >= 0) {\n        // includo lo zero nel true\n        var newArray = ls; // copio l'array in un'altra cella di memoria\n\n        newArray.splice(prodExist, 1); // modifico l'array\n      }\n\n      console.log(ls, a.list, prodExist);\n      return state;\n\n    case 'REMOVE_FORM_CART_LIST':\n      if (ls && ls.length > 0 && a.index !== undefined) {\n        var _newArray = ls; // copio l'array in un'altra cella di memoria\n\n        _newArray.splice(a.index, 1); // modifico l'array\n\n\n        return _objectSpread({}, state, {\n          list: _newArray,\n          submitted: submForList\n        });\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/wefed01/Sites/affx/public_html/react/src/state/reducers/cart.js"],"names":["cart","state","action","a","payload","p","list","ls","submForList","length","prod","id","network","code","name","slug","lang","country","currency","price","oldprice","type","submitted","alreadyInList","i","firstProd","prodInList","Set","map","prodExist","newArray","splice","console","log","index","undefined"],"mappings":"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","sourcesContent":["export default function cart(state, action) {\n\n  let a = action.payload\n  let p = a ? a.list : false\n  let ls = state.list ? state.list : []\n  let submForList =  ls && ls.length < 0 ? true : false\n  let prod = p ? { id:p.id, network:p.network, code:p.code, name:p.name,\n                   slug:p.slug, lang:p.lang, country:p.country,\n                   currency:p.currency, price:p.price, oldprice:p.oldprice }\n               : false\n\n  switch (action.type) {\n      case 'SET_CART':\n          return {\n              ...state,\n              list:  a.list,\n              submitted: submForList\n          }\n      case 'SET_SUBMIT_STATUS':\n          return {\n              ...state,\n              submitted:  a.submitted,\n          }\n      case 'ADD_TO_CART':\n        // controllo se l'ID prodotto c'è già in lista\n        let alreadyInList = false\n        for (var i = 0; i < ls.length; i++) {\n          if( ls[i].id === prod.id ) {\n            alreadyInList = true\n          }\n        }\n        if( alreadyInList ) {\n          // Se c'è non fare nulla (per ora non gestiamo la QTY)\n          return state;\n        } else {\n          // Se NON c'è aggiungilo alla lista (o crea lista nuova se carrello è vuoto)\n          let firstProd = [prod]\n          // https://stackoverflow.com/questions/41364383/remove-duplicates-form-an-array/41364495\n          let prodInList = [...new Set([...ls, prod].map(a => a))]\n          return {\n              ...state,\n              list : ls ? prodInList : firstProd,\n              submitted: submForList\n          }\n        }\n      case 'REMOVE_FORM_CART':\n        let prodExist = -1; // metto a -1 perchè per me l'indice a zero è un valore true\n        // ciclo sulla lista prodotti  nello stato e controllo se c'è il prod corrente\n        for (i = 0; i < ls.length; i++) {\n          if( ls[i].id === a.list.id ) {\n            prodExist = i\n          }\n        }\n        if( prodExist >= 0 ) { // includo lo zero nel true\n          let newArray = ls // copio l'array in un'altra cella di memoria\n          newArray.splice( prodExist, 1) // modifico l'array\n        }\n\n        console.log(ls, a.list, prodExist);\n        return state;\n\n      case 'REMOVE_FORM_CART_LIST':\n        if( ls && ls.length > 0 && a.index !== undefined ) {\n          let newArray = ls // copio l'array in un'altra cella di memoria\n          newArray.splice(a.index,1) // modifico l'array\n          return {\n              ...state,\n              list : newArray,\n              submitted: submForList\n          }\n        } else {\n          return state;\n        }\n\n      default:\n          return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}