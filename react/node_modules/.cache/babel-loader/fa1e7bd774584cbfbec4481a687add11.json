{"ast":null,"code":"// Store GCLID in Cookie and Send to Hubspot\n// Pass Tracking Parameters to a Form on Another Page Using GTM\n// http://zackphilipps.com/store-gclid-cookie-send-to-hubspot/\nimport { setTracker } from 'state/actions';\nimport { getTracker } from \"helpers/querystring\";\nimport { parseIfJsonString } from \"helpers/object_and_json\";\nimport { fetchCart } from 'state/actions';\nimport { f_trimall } from \"helpers/formatter\"; // REACT_APP_NAME // string = string.replace(/[^a-zA-Z0-9]/g, '');\n\nexport function getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + cookiePrefixer(name) + '=');\n  if (parts.length === 2) return parts.pop().split(';').shift();\n}\nexport function setCookie(name, value, days) {\n  if (value) {\n    var setDays = !isNaN(days) ? days : 30;\n    var strValue = typeof value === 'object' ? JSON.stringify(value) : value;\n    var date = new Date(); // setta la scadenza in giorni\n\n    date.setTime(date.getTime() + setDays * 24 * 60 * 60 * 1000);\n    var expires = '; expires=' + date.toGMTString();\n    document.cookie = cookiePrefixer(name) + '=' + strValue + expires + ';path=/';\n  }\n} // Qui vengono inizializzati i cookies\n\nexport function cookiesInit(componentProps) {\n  setTrackerCookiesToState(componentProps);\n  setCartCookieToState(componentProps);\n  setUserCookieToState(componentProps); //setFormABTestCookiesToState(componentProps)\n} // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PRIVATES\n// Imposta il prefisso dei nomi dei cookie in set e get\n\nfunction cookiePrefixer(name) {\n  return f_trimall(process.env.REACT_APP_NAME).toLowerCase() + '_' + name;\n}\n\nfunction setTrackerCookiesToState(componentProps) {\n  // recupero la querystring\n  var querystring = require('query-string').parse(componentProps.location.search); // setto il trackid e descrivo se è google o bing (usando l'helper apposito)\n\n\n  var tracker = getTracker(querystring); // se c'è il trackid nella querystring, lo setto nel cookie\n\n  if (tracker.trackid) setCookie('tracker', tracker);\n  var myCookieStr = getCookie('tracker');\n  var myCookie = parseIfJsonString(myCookieStr); // salvo nello stato globale il cookie per poterlo passare alla form\n\n  if (myCookie && myCookie.trackid) componentProps.dispatch(setTracker(myCookie));\n} // setta il cookie del carrello\n\n\nfunction setCartCookieToState(componentProps) {\n  var cookieCart = parseIfJsonString(getCookie('cart'));\n  componentProps.dispatch(fetchCart(cookieCart.list));\n} // setta il cookie del carrello\n\n\nfunction setUserCookieToState(componentProps) {\n  var cookieCart = parseIfJsonString(getCookie('user'));\n  componentProps.dispatch(fetchCart(cookieCart.list));\n}\n/*\n// TODO: ABILITARE QUI E IN cookiesInit() QUANDO SVILUPPERO' GLI ABTEST\n\n// setta tutti i cookie che passano i valori alla form prendendo la stringa randomica\nfunction setFormABTestCookiesToState() {\n  let abTest = getCookie('abTest')\n  if( !abTest || abTest==='{}' ) {\n    setCookie('abTest',ABTestCreateRamdoms())\n  }\n}\n\n// qui elenco tutti i valori in get che passerano ai cookie\n// e che a loro volta verranno passato alla form.\n// sono dei valori decisi randomicamente da una lista (TODO: creare lista con Marco)\nfunction ABTestCreateRamdoms() {\n  return {\n    //btnlabel : 'Procedi',\n    //btnbkg : '#0f0',\n    //btncolor : '#00f',\n    //btnbordercolor : '#ff0'\n  }\n}\n*/","map":{"version":3,"sources":["/Users/wefed01/Sites/affx/public_html/react/src/helpers/cookies.js"],"names":["setTracker","getTracker","parseIfJsonString","fetchCart","f_trimall","getCookie","name","value","document","cookie","parts","split","cookiePrefixer","length","pop","shift","setCookie","days","setDays","isNaN","strValue","JSON","stringify","date","Date","setTime","getTime","expires","toGMTString","cookiesInit","componentProps","setTrackerCookiesToState","setCartCookieToState","setUserCookieToState","process","env","REACT_APP_NAME","toLowerCase","querystring","require","parse","location","search","tracker","trackid","myCookieStr","myCookie","dispatch","cookieCart","list"],"mappings":"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","sourcesContent":["// Store GCLID in Cookie and Send to Hubspot\n// Pass Tracking Parameters to a Form on Another Page Using GTM\n// http://zackphilipps.com/store-gclid-cookie-send-to-hubspot/\n\nimport { setTracker } from 'state/actions'\nimport { getTracker } from \"helpers/querystring\"\nimport { parseIfJsonString } from \"helpers/object_and_json\"\nimport { fetchCart } from 'state/actions'\nimport { f_trimall } from \"helpers/formatter\"\n\n// REACT_APP_NAME // string = string.replace(/[^a-zA-Z0-9]/g, '');\n\nexport function getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + cookiePrefixer(name) + '=');\n  if (parts.length === 2)\n    return parts.pop().split(';').shift();\n}\n\nexport function setCookie(name, value, days) {\n  if( value ) {\n    let setDays = ( !isNaN(days) ) ? days : 30;\n    let strValue = ( typeof value === 'object' ) ? JSON.stringify(value) : value\n    var date = new Date();\n    // setta la scadenza in giorni\n    date.setTime(date.getTime() + (setDays * 24 * 60 * 60 * 1000));\n    var expires = '; expires=' + date.toGMTString();\n    document.cookie = cookiePrefixer(name) + '=' + strValue + expires + ';path=/';\n  }\n}\n\n// Qui vengono inizializzati i cookies\nexport function cookiesInit(componentProps) {\n  setTrackerCookiesToState(componentProps)\n  setCartCookieToState(componentProps)\n  setUserCookieToState(componentProps)\n  //setFormABTestCookiesToState(componentProps)\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PRIVATES\n\n// Imposta il prefisso dei nomi dei cookie in set e get\nfunction cookiePrefixer(name) {\n  return f_trimall(process.env.REACT_APP_NAME).toLowerCase() + '_' + name;\n}\n\nfunction setTrackerCookiesToState(componentProps) {\n  // recupero la querystring\n  const querystring = require('query-string').parse(componentProps.location.search);\n  // setto il trackid e descrivo se è google o bing (usando l'helper apposito)\n  const tracker = getTracker(querystring);\n  // se c'è il trackid nella querystring, lo setto nel cookie\n  if(tracker.trackid) setCookie('tracker',tracker)\n  const myCookieStr = getCookie('tracker')\n  const myCookie = parseIfJsonString(myCookieStr)\n  // salvo nello stato globale il cookie per poterlo passare alla form\n  if( myCookie && myCookie.trackid ) componentProps.dispatch( setTracker( myCookie ) )\n}\n\n// setta il cookie del carrello\nfunction setCartCookieToState(componentProps) {\n  const cookieCart = parseIfJsonString( getCookie('cart') )\n  componentProps.dispatch( fetchCart(cookieCart.list) )\n}\n\n// setta il cookie del carrello\nfunction setUserCookieToState(componentProps) {\n  const cookieCart = parseIfJsonString( getCookie('user') )\n  componentProps.dispatch( fetchCart(cookieCart.list) )\n}\n\n/*\n// TODO: ABILITARE QUI E IN cookiesInit() QUANDO SVILUPPERO' GLI ABTEST\n\n// setta tutti i cookie che passano i valori alla form prendendo la stringa randomica\nfunction setFormABTestCookiesToState() {\n  let abTest = getCookie('abTest')\n  if( !abTest || abTest==='{}' ) {\n    setCookie('abTest',ABTestCreateRamdoms())\n  }\n}\n\n// qui elenco tutti i valori in get che passerano ai cookie\n// e che a loro volta verranno passato alla form.\n// sono dei valori decisi randomicamente da una lista (TODO: creare lista con Marco)\nfunction ABTestCreateRamdoms() {\n  return {\n    //btnlabel : 'Procedi',\n    //btnbkg : '#0f0',\n    //btncolor : '#00f',\n    //btnbordercolor : '#ff0'\n  }\n}\n*/\n"]},"metadata":{},"sourceType":"module"}