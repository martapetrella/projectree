{"ast":null,"code":"import _toConsumableArray from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport default function cart(state, action) {\n  var a = action.payload;\n  var p = a ? a.list : false;\n  var ls = state.list;\n  var prod = p ? {\n    id: p.id,\n    network: p.network,\n    code: p.code,\n    name: p.name,\n    slug: p.slug,\n    lang: p.lang,\n    country: p.country,\n    currency: p.currency,\n    price: p.price,\n    oldprice: p.oldprice\n  } : false;\n\n  switch (action.type) {\n    case 'SET_CART':\n      return _objectSpread({}, state, {\n        list: a.list\n      });\n\n    case 'ADD_TO_CART':\n      // controllo se l'ID prodotto c'è già in lista\n      var alreadyInList = false;\n\n      for (var i = 0; i < ls.length; i++) {\n        if (ls[i].id === prod.id) {\n          alreadyInList = true;\n        }\n      }\n\n      if (alreadyInList) {\n        // Se c'è non fare nulla (per ora non gestiamo la QTY)\n        return state;\n      } else {\n        // Se NON c'è aggiungilo alla lista (o crea lista nuova se carrello è vuoto)\n        // https://stackoverflow.com/questions/41364383/remove-duplicates-form-an-array/41364495\n        var prodInList = _toConsumableArray(new Set([].concat(_toConsumableArray(ls), [prod]).map(function (a) {\n          return a;\n        })));\n\n        var firstProd = [prod];\n        return _objectSpread({}, state, {\n          list: ls ? prodInList : firstProd\n        });\n      }\n\n    case 'REMOVE_TO_CART':\n      if (ls.length > 0 && a.index !== undefined) {\n        var newArray = ls; // copio l'array in un'altra cella di memoria\n\n        newArray.splice(a.index, 1); // modifico l'array\n\n        return _objectSpread({}, state, {\n          list: newArray\n        });\n      } else {\n        return state;\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/wefed01/Sites/affx/public_html/react/src/state/reducers/cart.js"],"names":["cart","state","action","a","payload","p","list","ls","prod","id","network","code","name","slug","lang","country","currency","price","oldprice","type","alreadyInList","i","length","prodInList","Set","map","firstProd","index","undefined","newArray","splice"],"mappings":";;AAAA,eAAe,SAASA,IAAT,CAAcC,KAAd,EAAqBC,MAArB,EAA6B;AAE1C,MAAIC,CAAC,GAAGD,MAAM,CAACE,OAAf;AACA,MAAIC,CAAC,GAAGF,CAAC,GAAGA,CAAC,CAACG,IAAL,GAAY,KAArB;AACA,MAAIC,EAAE,GAAGN,KAAK,CAACK,IAAf;AAEA,MAAIE,IAAI,GAAGH,CAAC,GAAG;AAAEI,IAAAA,EAAE,EAACJ,CAAC,CAACI,EAAP;AAAWC,IAAAA,OAAO,EAACL,CAAC,CAACK,OAArB;AAA8BC,IAAAA,IAAI,EAACN,CAAC,CAACM,IAArC;AAA2CC,IAAAA,IAAI,EAACP,CAAC,CAACO,IAAlD;AACEC,IAAAA,IAAI,EAACR,CAAC,CAACQ,IADT;AACeC,IAAAA,IAAI,EAACT,CAAC,CAACS,IADtB;AAC4BC,IAAAA,OAAO,EAACV,CAAC,CAACU,OADtC;AAEEC,IAAAA,QAAQ,EAACX,CAAC,CAACW,QAFb;AAEuBC,IAAAA,KAAK,EAACZ,CAAC,CAACY,KAF/B;AAEsCC,IAAAA,QAAQ,EAACb,CAAC,CAACa;AAFjD,GAAH,GAGG,KAHf;;AAKA,UAAQhB,MAAM,CAACiB,IAAf;AACI,SAAK,UAAL;AACI,+BACOlB,KADP;AAEIK,QAAAA,IAAI,EAAGH,CAAC,CAACG;AAFb;;AAIJ,SAAK,aAAL;AACA;AACE,UAAIc,aAAa,GAAG,KAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,EAAE,CAACe,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,YAAId,EAAE,CAACc,CAAD,CAAF,CAAMZ,EAAN,KAAaD,IAAI,CAACC,EAAtB,EAA2B;AACzBW,UAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AACD,UAAIA,aAAJ,EAAoB;AAClB;AACA,eAAOnB,KAAP;AACD,OAHD,MAGO;AACL;AAEA;AACA,YAAIsB,UAAU,sBAAO,IAAIC,GAAJ,CAAQ,6BAAIjB,EAAJ,IAAQC,IAAR,GAAciB,GAAd,CAAkB,UAAAtB,CAAC;AAAA,iBAAIA,CAAJ;AAAA,SAAnB,CAAR,CAAP,CAAd;;AACA,YAAIuB,SAAS,GAAG,CAAClB,IAAD,CAAhB;AACA,iCACOP,KADP;AAEIK,UAAAA,IAAI,EAAGC,EAAE,GAAGgB,UAAH,GAAgBG;AAF7B;AAID;;AACH,SAAK,gBAAL;AACE,UAAInB,EAAE,CAACe,MAAH,GAAY,CAAZ,IAAiBnB,CAAC,CAACwB,KAAF,KAAYC,SAAjC,EAA6C;AAC3C,YAAIC,QAAQ,GAAGtB,EAAf,CAD2C,CACzB;;AAClBsB,QAAAA,QAAQ,CAACC,MAAT,CAAgB3B,CAAC,CAACwB,KAAlB,EAAwB,CAAxB,EAF2C,CAEhB;;AAC3B,iCACO1B,KADP;AAEIK,UAAAA,IAAI,EAAGuB;AAFX;AAID,OAPD,MAOO;AACL,eAAO5B,KAAP;AACD;;AAEH;AACI,aAAOA,KAAP;AAzCR;AA2CD","sourcesContent":["export default function cart(state, action) {\n\n  let a = action.payload\n  let p = a ? a.list : false\n  let ls = state.list\n\n  let prod = p ? { id:p.id, network:p.network, code:p.code, name:p.name,\n                   slug:p.slug, lang:p.lang, country:p.country,\n                   currency:p.currency, price:p.price, oldprice:p.oldprice }\n               : false\n\n  switch (action.type) {\n      case 'SET_CART':\n          return {\n              ...state,\n              list:  a.list,\n          }\n      case 'ADD_TO_CART':\n      // controllo se l'ID prodotto c'è già in lista\n        let alreadyInList = false\n        for (var i = 0; i < ls.length; i++) {\n          if( ls[i].id === prod.id ) {\n            alreadyInList = true\n          }\n        }\n        if( alreadyInList ) {\n          // Se c'è non fare nulla (per ora non gestiamo la QTY)\n          return state;\n        } else {\n          // Se NON c'è aggiungilo alla lista (o crea lista nuova se carrello è vuoto)\n\n          // https://stackoverflow.com/questions/41364383/remove-duplicates-form-an-array/41364495\n          let prodInList = [...new Set([...ls, prod].map(a => a))]\n          let firstProd = [prod]\n          return {\n              ...state,\n              list : ls ? prodInList : firstProd\n          }\n        }\n      case 'REMOVE_TO_CART':\n        if( ls.length > 0 && a.index !== undefined ) {\n          let newArray = ls // copio l'array in un'altra cella di memoria\n          newArray.splice(a.index,1) // modifico l'array\n          return {\n              ...state,\n              list : newArray\n          }\n        } else {\n          return state;\n        }\n\n      default:\n          return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}