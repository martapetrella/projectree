{"ast":null,"code":"// Store GCLID in Cookie and Send to Hubspot\n// Pass Tracking Parameters to a Form on Another Page Using GTM\n// http://zackphilipps.com/store-gclid-cookie-send-to-hubspot/\nimport { setTracker } from 'state/actions';\nimport { getTrackerObj } from \"helpers/querystring\";\nimport { parseIfJsonString } from \"helpers/object_and_json\";\nimport { fetchCart, fetchUser } from 'state/actions';\nimport { f_trimall } from \"helpers/formatter\"; // REACT_APP_NAME // string = string.replace(/[^a-zA-Z0-9]/g, '');\n\nexport function getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + cookiePrefixer(name) + '=');\n  if (parts.length === 2) return parts.pop().split(';').shift();\n}\nexport function setCookie(name, value, days) {\n  if (value) {\n    var setDays = !isNaN(days) ? days : 30;\n    var strValue = typeof value === 'object' ? JSON.stringify(value) : value;\n    var date = new Date(); // setta la scadenza in giorni\n\n    date.setTime(date.getTime() + setDays * 24 * 60 * 60 * 1000);\n    var expires = '; expires=' + date.toGMTString();\n    document.cookie = cookiePrefixer(name) + '=' + strValue + expires + ';path=/';\n  }\n} // Qui vengono inizializzati i cookies\n\nexport function cookiesInit(componentProps) {\n  setStateAndCookieFromQuery_tracker(componentProps);\n  setStateFromCookie('cart', fetchCart, 'list', componentProps);\n  /* MOMENTANEO ---> */\n\n  setCookie('user', {\n    name: \"Ciccia\",\n    phone: \"123123123123\",\n    address: \"via le mani dal culo\",\n    city: \"Milano\",\n    zipcode: \"22331133\".substring(0, 5),\n    email: \"ciccio@ciccio.it\"\n  });\n  setStateFromCookie('user', fetchUser, 'info', componentProps); // TODO: Rifare funzione setStateFromCookie_abTest() usando setStateFromCookie()\n  //setStateFromCookie_abTest(componentProps)\n} // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PRIVATES\n// Imposta il prefisso dei nomi dei cookie in set e get\n\nfunction cookiePrefixer(name) {\n  return f_trimall(process.env.REACT_APP_NAME).toLowerCase() + '_' + name;\n} // Aggiorna lo stato globale in base a un cookie\n\n\nfunction setStateFromCookie(cookieName, actionToDispatch, valueInObj, componentProps) {\n  var obj = parseIfJsonString(getCookie(cookieName));\n  console.log('setStateFromCookie', cookieName, 'valueInObj', valueInObj, 'obj[' + valueInObj + ']', obj[valueInObj]);\n  if (!valueInObj) componentProps.dispatch(actionToDispatch(obj));else if (obj[valueInObj]) componentProps.dispatch(actionToDispatch(obj[valueInObj]));\n} // Aggiorna Cookie e Stato in base a un parametro in query (per tracker)\n\n\nfunction setStateAndCookieFromQuery_tracker(componentProps) {\n  // setto il trackid e indico se Ã¨ google o bing (usando l'helper apposito)\n  var tracker = getTrackerObj(componentProps.location.search);\n\n  if (tracker) {\n    // setta il cookie\n    setCookie('tracker', tracker); // TODO: sarebbe meglio lanciarla come callback del set cookie. prio bassa ma fallo.\n\n    setStateFromCookie('tracker', setTracker, false, componentProps);\n  }\n}\n/*\n// TODO: ABILITARE QUI E IN cookiesInit() QUANDO SVILUPPERO' GLI ABTEST\n\n// setta tutti i cookie che passano i valori alla form prendendo la stringa randomica\nfunction setStateFromCookie_abTest() {\n  let abTest = getCookie('abTest')\n  if( !abTest || abTest==='{}' ) {\n    setCookie('abTest',ABTestCreateRamdoms())\n  }\n}\n\n// qui elenco tutti i valori in get che passerano ai cookie\n// e che a loro volta verranno passato alla form.\n// sono dei valori decisi randomicamente da una lista (TODO: creare lista con Marco)\nfunction ABTestCreateRamdoms() {\n  return {\n    //btnlabel : 'Procedi',\n    //btnbkg : '#0f0',\n    //btncolor : '#00f',\n    //btnbordercolor : '#ff0'\n  }\n}\n*/","map":{"version":3,"sources":["/Users/wefed01/Sites/affx/public_html/react/src/helpers/cookies.js"],"names":["setTracker","getTrackerObj","parseIfJsonString","fetchCart","fetchUser","f_trimall","getCookie","name","value","document","cookie","parts","split","cookiePrefixer","length","pop","shift","setCookie","days","setDays","isNaN","strValue","JSON","stringify","date","Date","setTime","getTime","expires","toGMTString","cookiesInit","componentProps","setStateAndCookieFromQuery_tracker","setStateFromCookie","phone","address","city","zipcode","substring","email","process","env","REACT_APP_NAME","toLowerCase","cookieName","actionToDispatch","valueInObj","obj","console","log","dispatch","tracker","location","search"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,eAArC;AACA,SAASC,SAAT,QAA0B,mBAA1B,C,CAEA;;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAC9B,MAAIC,KAAK,GAAG,OAAOC,QAAQ,CAACC,MAA5B;AACA,MAAIC,KAAK,GAAGH,KAAK,CAACI,KAAN,CAAY,OAAOC,cAAc,CAACN,IAAD,CAArB,GAA8B,GAA1C,CAAZ;AACA,MAAII,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB,OAAOH,KAAK,CAACI,GAAN,GAAYH,KAAZ,CAAkB,GAAlB,EAAuBI,KAAvB,EAAP;AACzB;AAED,OAAO,SAASC,SAAT,CAAmBV,IAAnB,EAAyBC,KAAzB,EAAgCU,IAAhC,EAAuC;AAC5C,MAAIV,KAAJ,EAAY;AACV,QAAIW,OAAO,GAAK,CAACC,KAAK,CAACF,IAAD,CAAR,GAAmBA,IAAnB,GAA0B,EAAxC;AACA,QAAIG,QAAQ,GAAK,OAAOb,KAAP,KAAiB,QAAnB,GAAgCc,IAAI,CAACC,SAAL,CAAef,KAAf,CAAhC,GAAwDA,KAAvE;AACA,QAAIgB,IAAI,GAAG,IAAIC,IAAJ,EAAX,CAHU,CAIV;;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,KAAkBR,OAAO,GAAG,EAAV,GAAe,EAAf,GAAoB,EAApB,GAAyB,IAAxD;AACA,QAAIS,OAAO,GAAG,eAAeJ,IAAI,CAACK,WAAL,EAA7B;AACApB,IAAAA,QAAQ,CAACC,MAAT,GAAkBG,cAAc,CAACN,IAAD,CAAd,GAAuB,GAAvB,GAA6Bc,QAA7B,GAAwCO,OAAxC,GAAkD,SAApE;AACD;AACF,C,CAED;;AACA,OAAO,SAASE,WAAT,CAAqBC,cAArB,EAAqC;AAC1CC,EAAAA,kCAAkC,CAACD,cAAD,CAAlC;AACAE,EAAAA,kBAAkB,CAAC,MAAD,EAAQ9B,SAAR,EAAkB,MAAlB,EAAyB4B,cAAzB,CAAlB;AAEA;;AAAsBd,EAAAA,SAAS,CAAC,MAAD,EAAQ;AAAEV,IAAAA,IAAI,EAAE,QAAR;AACE2B,IAAAA,KAAK,EAAE,cADT;AAEEC,IAAAA,OAAO,EAAE,sBAFX;AAGEC,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,OAAO,EAAE,WAAWC,SAAX,CAAqB,CAArB,EAAuB,CAAvB,CAJX;AAKEC,IAAAA,KAAK,EAAE;AALT,GAAR,CAAT;AAQtBN,EAAAA,kBAAkB,CAAC,MAAD,EAAQ7B,SAAR,EAAkB,MAAlB,EAAyB2B,cAAzB,CAAlB,CAZ0C,CAa1C;AACA;AACD,C,CAED;AACA;AAEA;;AACA,SAASlB,cAAT,CAAwBN,IAAxB,EAA8B;AAC5B,SAAOF,SAAS,CAACmC,OAAO,CAACC,GAAR,CAAYC,cAAb,CAAT,CAAsCC,WAAtC,KAAsD,GAAtD,GAA4DpC,IAAnE;AACD,C,CAED;;;AACA,SAAS0B,kBAAT,CAA4BW,UAA5B,EAAuCC,gBAAvC,EAAwDC,UAAxD,EAAmEf,cAAnE,EAAmF;AACjF,MAAMgB,GAAG,GAAG7C,iBAAiB,CAAEI,SAAS,CAACsC,UAAD,CAAX,CAA7B;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAa,oBAAb,EAAmCL,UAAnC,EAA+C,YAA/C,EAA6DE,UAA7D,EAAyE,SAAOA,UAAP,GAAkB,GAA3F,EAAgGC,GAAG,CAACD,UAAD,CAAnG;AAEA,MAAI,CAACA,UAAL,EAAkBf,cAAc,CAACmB,QAAf,CAAyBL,gBAAgB,CAACE,GAAD,CAAzC,EAAlB,KACK,IAAIA,GAAG,CAACD,UAAD,CAAP,EAAsBf,cAAc,CAACmB,QAAf,CAAyBL,gBAAgB,CAACE,GAAG,CAACD,UAAD,CAAJ,CAAzC;AAC5B,C,CAED;;;AACA,SAASd,kCAAT,CAA4CD,cAA5C,EAA4D;AAC1D;AACA,MAAMoB,OAAO,GAAGlD,aAAa,CAAE8B,cAAc,CAACqB,QAAf,CAAwBC,MAA1B,CAA7B;;AACA,MAAIF,OAAJ,EAAc;AACZ;AACAlC,IAAAA,SAAS,CAAC,SAAD,EAAWkC,OAAX,CAAT,CAFY,CAGZ;;AACAlB,IAAAA,kBAAkB,CAAC,SAAD,EAAWjC,UAAX,EAAsB,KAAtB,EAA4B+B,cAA5B,CAAlB;AACD;AACF;AAED","sourcesContent":["// Store GCLID in Cookie and Send to Hubspot\n// Pass Tracking Parameters to a Form on Another Page Using GTM\n// http://zackphilipps.com/store-gclid-cookie-send-to-hubspot/\n\nimport { setTracker } from 'state/actions'\nimport { getTrackerObj } from \"helpers/querystring\"\nimport { parseIfJsonString } from \"helpers/object_and_json\"\nimport { fetchCart, fetchUser } from 'state/actions'\nimport { f_trimall } from \"helpers/formatter\"\n\n// REACT_APP_NAME // string = string.replace(/[^a-zA-Z0-9]/g, '');\n\nexport function getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + cookiePrefixer(name) + '=');\n  if (parts.length === 2) return parts.pop().split(';').shift();\n}\n\nexport function setCookie(name, value, days ) {\n  if( value ) {\n    let setDays = ( !isNaN(days) ) ? days : 30;\n    let strValue = ( typeof value === 'object' ) ? JSON.stringify(value) : value\n    var date = new Date();\n    // setta la scadenza in giorni\n    date.setTime(date.getTime() + (setDays * 24 * 60 * 60 * 1000));\n    var expires = '; expires=' + date.toGMTString();\n    document.cookie = cookiePrefixer(name) + '=' + strValue + expires + ';path=/';\n  }\n}\n\n// Qui vengono inizializzati i cookies\nexport function cookiesInit(componentProps) {\n  setStateAndCookieFromQuery_tracker(componentProps)\n  setStateFromCookie('cart',fetchCart,'list',componentProps)\n\n  /* MOMENTANEO ---> */ setCookie('user',{ name: \"Ciccia\",\n                                           phone: \"123123123123\",\n                                           address: \"via le mani dal culo\",\n                                           city: \"Milano\",\n                                           zipcode: \"22331133\".substring(0,5),\n                                           email: \"ciccio@ciccio.it\",\n                                         });\n\n  setStateFromCookie('user',fetchUser,'info',componentProps)\n  // TODO: Rifare funzione setStateFromCookie_abTest() usando setStateFromCookie()\n  //setStateFromCookie_abTest(componentProps)\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PRIVATES\n\n// Imposta il prefisso dei nomi dei cookie in set e get\nfunction cookiePrefixer(name) {\n  return f_trimall(process.env.REACT_APP_NAME).toLowerCase() + '_' + name;\n}\n\n// Aggiorna lo stato globale in base a un cookie\nfunction setStateFromCookie(cookieName,actionToDispatch,valueInObj,componentProps) {\n  const obj = parseIfJsonString( getCookie(cookieName) )\n\n  console.log( 'setStateFromCookie', cookieName, 'valueInObj', valueInObj, 'obj['+valueInObj+']', obj[valueInObj] );\n\n  if( !valueInObj ) componentProps.dispatch( actionToDispatch(obj) )\n  else if( obj[valueInObj] ) componentProps.dispatch( actionToDispatch(obj[valueInObj]) )\n}\n\n// Aggiorna Cookie e Stato in base a un parametro in query (per tracker)\nfunction setStateAndCookieFromQuery_tracker(componentProps) {\n  // setto il trackid e indico se Ã¨ google o bing (usando l'helper apposito)\n  const tracker = getTrackerObj( componentProps.location.search );\n  if( tracker ) {\n    // setta il cookie\n    setCookie('tracker',tracker)\n    // TODO: sarebbe meglio lanciarla come callback del set cookie. prio bassa ma fallo.\n    setStateFromCookie('tracker',setTracker,false,componentProps)\n  }\n}\n\n/*\n// TODO: ABILITARE QUI E IN cookiesInit() QUANDO SVILUPPERO' GLI ABTEST\n\n// setta tutti i cookie che passano i valori alla form prendendo la stringa randomica\nfunction setStateFromCookie_abTest() {\n  let abTest = getCookie('abTest')\n  if( !abTest || abTest==='{}' ) {\n    setCookie('abTest',ABTestCreateRamdoms())\n  }\n}\n\n// qui elenco tutti i valori in get che passerano ai cookie\n// e che a loro volta verranno passato alla form.\n// sono dei valori decisi randomicamente da una lista (TODO: creare lista con Marco)\nfunction ABTestCreateRamdoms() {\n  return {\n    //btnlabel : 'Procedi',\n    //btnbkg : '#0f0',\n    //btncolor : '#00f',\n    //btnbordercolor : '#ff0'\n  }\n}\n*/\n"]},"metadata":{},"sourceType":"module"}