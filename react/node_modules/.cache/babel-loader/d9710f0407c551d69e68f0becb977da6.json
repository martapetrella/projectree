{"ast":null,"code":"export function getVisibleProds(state) {\n  var prods = state.prods;\n  var prodsList = prods.list;\n  return prodsList;\n}\nexport function getVisibleProd(state) {\n  var prod = state.prod;\n  var prodList = prod.list;\n  return prodList;\n}\nexport function getFilteredProds(prods, amount) {\n  if (!amount) return prods;\n  return prods.filter(function (prod) {\n    return prod.amount > amount;\n  }).sort();\n}\nexport function getSortedProds(prods, sortDir, sortBy) {\n  var compareFunction;\n  if (!sortBy) return prods; // l'array temporaneo contiene oggetti con posizione e valore di ordinamento\n\n  var mapped = prods.map(function (el) {\n    return {\n      index: el[sortBy],\n      value: el\n    };\n  }); // sorting tramite le compareFunctions\n\n  switch (sortDir) {\n    case 'DESC':\n      compareFunction = function compareFunction(a, b) {\n        if (a.index > b.index) return -1;\n        if (a.index < b.index) return 1;\n        return 0;\n      };\n\n      break;\n\n    default:\n      compareFunction = function compareFunction(a, b) {\n        if (a.index > b.index) return 1;\n        if (a.index < b.index) return -1;\n        return 0;\n      };\n\n      break;\n  } // ordinamento dell'array mappato contenente i valori ridotti\n\n\n  if (compareFunction) {\n    mapped.sort(compareFunction);\n  } else {\n    mapped.sort();\n  } // rimappatura dell'array nell'ordine sortato\n\n\n  var result = mapped.map(function (el) {\n    return el.value;\n  }); // ritorna il nuovo array\n\n  return result;\n}","map":{"version":3,"sources":["/Users/wefed01/Sites/projectree/react/src/state/selectors.js"],"names":["getVisibleProds","state","prods","prodsList","list","getVisibleProd","prod","prodList","getFilteredProds","amount","filter","sort","getSortedProds","sortDir","sortBy","compareFunction","mapped","map","el","index","value","a","b","result"],"mappings":"AACA,OAAO,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,MAC3BC,KAD2B,GACjBD,KADiB,CAC3BC,KAD2B;AAEnC,MAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,SAAOD,SAAP;AACH;AAED,OAAO,SAASE,cAAT,CAAwBJ,KAAxB,EAA+B;AAAA,MAC1BK,IAD0B,GACjBL,KADiB,CAC1BK,IAD0B;AAElC,MAAIC,QAAQ,GAAGD,IAAI,CAACF,IAApB;AACA,SAAOG,QAAP;AACH;AAED,OAAO,SAASC,gBAAT,CAA0BN,KAA1B,EAAgCO,MAAhC,EAAwC;AAC3C,MAAI,CAACA,MAAL,EAAa,OAAOP,KAAP;AACb,SAAOA,KAAK,CAACQ,MAAN,CAAa,UAAAJ,IAAI;AAAA,WAAIA,IAAI,CAACG,MAAL,GAAcA,MAAlB;AAAA,GAAjB,EAA2CE,IAA3C,EAAP;AACH;AAED,OAAO,SAASC,cAAT,CAAwBV,KAAxB,EAA8BW,OAA9B,EAAsCC,MAAtC,EAA8C;AACjD,MAAIC,eAAJ;AACA,MAAI,CAAED,MAAN,EAAe,OAAOZ,KAAP,CAFkC,CAGjD;;AACA,MAAIc,MAAM,GAAGd,KAAK,CAACe,GAAN,CAAU,UAACC,EAAD,EAAO;AAC5B,WAAO;AAAEC,MAAAA,KAAK,EAAED,EAAE,CAACJ,MAAD,CAAX;AAAqBM,MAAAA,KAAK,EAAEF;AAA5B,KAAP;AACD,GAFY,CAAb,CAJiD,CAOjD;;AACA,UAAOL,OAAP;AACE,SAAK,MAAL;AACEE,MAAAA,eAAe,GAAG,yBAASM,CAAT,EAAWC,CAAX,EAAc;AAC9B,YAAID,CAAC,CAACF,KAAF,GAAUG,CAAC,CAACH,KAAhB,EAAuB,OAAO,CAAC,CAAR;AACvB,YAAIE,CAAC,CAACF,KAAF,GAAUG,CAAC,CAACH,KAAhB,EAAuB,OAAO,CAAP;AACvB,eAAO,CAAP;AACD,OAJD;;AAKF;;AACA;AACEJ,MAAAA,eAAe,GAAG,yBAASM,CAAT,EAAWC,CAAX,EAAc;AAC9B,YAAID,CAAC,CAACF,KAAF,GAAUG,CAAC,CAACH,KAAhB,EAAuB,OAAO,CAAP;AACvB,YAAIE,CAAC,CAACF,KAAF,GAAUG,CAAC,CAACH,KAAhB,EAAuB,OAAO,CAAC,CAAR;AACvB,eAAO,CAAP;AACD,OAJD;;AAKF;AAdF,GARiD,CAwBjD;;;AACA,MAAGJ,eAAH,EAAoB;AAClBC,IAAAA,MAAM,CAACL,IAAP,CAAYI,eAAZ;AACD,GAFD,MAEO;AACLC,IAAAA,MAAM,CAACL,IAAP;AACD,GA7BgD,CA8BjD;;;AACA,MAAIY,MAAM,GAAGP,MAAM,CAACC,GAAP,CAAW,UAACC,EAAD;AAAA,WAAMA,EAAE,CAACE,KAAT;AAAA,GAAX,CAAb,CA/BiD,CAgCjD;;AACA,SAAOG,MAAP;AACH","sourcesContent":["\nexport function getVisibleProds(state) {\n    const { prods } = state\n    let prodsList = prods.list\n    return prodsList\n}\n\nexport function getVisibleProd(state) {\n    const { prod } = state\n    let prodList = prod.list\n    return prodList\n}\n\nexport function getFilteredProds(prods,amount) {\n    if (!amount) return prods\n    return prods.filter(prod => prod.amount > amount).sort()\n}\n\nexport function getSortedProds(prods,sortDir,sortBy) {\n    let compareFunction\n    if( ! sortBy ) return prods\n    // l'array temporaneo contiene oggetti con posizione e valore di ordinamento\n    var mapped = prods.map((el)=> {\n      return { index: el[sortBy], value: el };\n    })\n    // sorting tramite le compareFunctions\n    switch(sortDir) {\n      case 'DESC':\n        compareFunction = function(a,b) {\n          if (a.index > b.index) return -1;\n          if (a.index < b.index) return 1;\n          return 0;\n        }\n      break;\n      default:\n        compareFunction = function(a,b) {\n          if (a.index > b.index) return 1;\n          if (a.index < b.index) return -1;\n          return 0;\n        }\n      break;\n    }\n    // ordinamento dell'array mappato contenente i valori ridotti\n    if(compareFunction) {\n      mapped.sort(compareFunction);\n    } else {\n      mapped.sort();\n    }\n    // rimappatura dell'array nell'ordine sortato\n    var result = mapped.map((el)=>el.value);\n    // ritorna il nuovo array\n    return result\n}\n"]},"metadata":{},"sourceType":"module"}