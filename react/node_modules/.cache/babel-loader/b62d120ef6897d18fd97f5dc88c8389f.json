{"ast":null,"code":"import _classCallCheck from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wefed01/Sites/affx/public_html/react/src/pages/Prods/Prod/parts/Link.js\";\n//import './style.scss';\nimport React, { Component } from 'react';\nimport Link from \"components/Link/\";\nimport { getProdLink } from \"helpers/getPath\";\nimport { i18nContext } from 'contexts/i18n';\nimport { f_class } from \"helpers/formatter\"; // NOTE: Per poter ricaricare il componente del prodotto anche se lo richiamo\n// da se stesso (come nel caso dei relatedProd ,che devono ricaricare lo stesso\n// componente ma con dati differenti) ho bisogno di passare nel link uno \"state\"\n// ( es: <Link to={pathname: prodPath, state: prod.id } ... ) e controllare\n// questo state con il \"componentWillReceiveProps\", utilizzando il location.state\n// per monitorare quando questo stato cambia e richiedere di nuovo fetchProd().\n\nvar ProdLink =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProdLink, _Component);\n\n  function ProdLink() {\n    _classCallCheck(this, ProdLink);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProdLink).apply(this, arguments));\n  }\n\n  _createClass(ProdLink, [{\n    key: \"render\",\n    value: function render() {\n      var i18n = this.context;\n      var _this$props = this.props,\n          prod = _this$props.prod,\n          linkStyle = _this$props.linkStyle,\n          addActionToLink = _this$props.addActionToLink;\n      var prodLink = getProdLink(i18n.lang, prod);\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(Link, Object.assign({\n        to: prodLink\n      }, this.props, {\n        className: \"c-prod-link \" + f_class(linkStyle),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }), this.props.children));\n    }\n  }]);\n\n  return ProdLink;\n}(Component);\n\nProdLink.contextType = i18nContext;\nProdLink.contextType = i18nContext;\nexport default ProdLink;","map":{"version":3,"sources":["/Users/wefed01/Sites/affx/public_html/react/src/pages/Prods/Prod/parts/Link.js"],"names":["React","Component","Link","getProdLink","i18nContext","f_class","ProdLink","i18n","context","props","prod","linkStyle","addActionToLink","prodLink","lang","children","contextType"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;IAEMC,Q;;;;;;;;;;;;;6BAEI;AACN,UAAIC,IAAI,GAAG,KAAKC,OAAhB;AADM,wBAEuC,KAAKC,KAF5C;AAAA,UAEEC,IAFF,eAEEA,IAFF;AAAA,UAEQC,SAFR,eAEQA,SAFR;AAAA,UAEmBC,eAFnB,eAEmBA,eAFnB;AAGN,UAAIC,QAAQ,GAAGV,WAAW,CAACI,IAAI,CAACO,IAAN,EAAWJ,IAAX,CAA1B;AACA,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAEG;AAAV,SACM,KAAKJ,KADX;AAEE,QAAA,SAAS,EAAE,iBAAeJ,OAAO,CAACM,SAAD,CAFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAGG,KAAKF,KAAL,CAAWM,QAHd,CADF,CADF;AASD;;;;EAfoBd,S;;AAAjBK,Q,CACGU,W,GAAcZ,W;AAiBvBE,QAAQ,CAACU,WAAT,GAAuBZ,WAAvB;AACA,eAAeE,QAAf","sourcesContent":["//import './style.scss';\nimport React, { Component } from 'react'\nimport Link from \"components/Link/\";\nimport { getProdLink } from \"helpers/getPath\"\nimport {i18nContext} from 'contexts/i18n'\nimport { f_class } from \"helpers/formatter\"\n\n// NOTE: Per poter ricaricare il componente del prodotto anche se lo richiamo\n// da se stesso (come nel caso dei relatedProd ,che devono ricaricare lo stesso\n// componente ma con dati differenti) ho bisogno di passare nel link uno \"state\"\n// ( es: <Link to={pathname: prodPath, state: prod.id } ... ) e controllare\n// questo state con il \"componentWillReceiveProps\", utilizzando il location.state\n// per monitorare quando questo stato cambia e richiedere di nuovo fetchProd().\n\nclass ProdLink extends Component {\n  static contextType = i18nContext;\n  render(){\n    let i18n = this.context;\n    const { prod, linkStyle, addActionToLink } = this.props\n    let prodLink = getProdLink(i18n.lang,prod)\n    return(\n      <React.Fragment>\n        <Link to={prodLink}\n          {...this.props}\n          className={\"c-prod-link \"+f_class(linkStyle)} >\n          {this.props.children}\n        </Link>\n      </React.Fragment>\n    )\n  }\n}\n\nProdLink.contextType = i18nContext\nexport default ProdLink\n"]},"metadata":{},"sourceType":"module"}