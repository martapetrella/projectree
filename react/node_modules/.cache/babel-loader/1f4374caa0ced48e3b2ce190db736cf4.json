{"ast":null,"code":"import _defineProperty from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wefed01/Sites/affx/public_html/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wefed01/Sites/affx/public_html/react/src/pages/Cart/form.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { i18nContext } from 'contexts/i18n';\nimport { fetchUser } from 'state/actions';\nimport { Form, Input } from \"components/Form/\";\n\nvar FormUser =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormUser, _Component);\n\n  function FormUser(props) {\n    var _this;\n\n    _classCallCheck(this, FormUser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormUser).call(this, props));\n\n    _this.handleChange = function (event) {\n      var target = event.target;\n      var value = target.type === 'checkbox' ? target.checked : target.value;\n      var name = target.name;\n\n      _this.setState({\n        info: _objectSpread({}, _this.state.info, _defineProperty({}, name, value))\n      });\n    };\n\n    _this.handleSubmit = function (event) {\n      console.log('E\\' stato inserito un valore: ', _this.state.info);\n      event.preventDefault();\n\n      _this.props.dispatch(fetchUser(_this.state.info));\n    };\n\n    _this.state = {\n      info: _this.props.user.info\n    };\n    return _this;\n  }\n\n  _createClass(FormUser, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var i18n = this.context;\n      console.log(i18n.form.name);\n      var fields = [{\n        name: 'name',\n        type: 'textarea'\n      }, {\n        name: 'phone'\n      }, {\n        name: 'address'\n      }, {\n        name: 'city'\n      }, {\n        name: 'zipcode'\n      }, {\n        name: 'email'\n      }];\n      var inputs = fields.map(function (field, i) {\n        return React.createElement(Input, Object.assign({}, field, {\n          key: i,\n          defaultValue: _this2.state.info[field.name],\n          onChange: _this2.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }));\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, inputs));\n    }\n  }]);\n\n  return FormUser;\n}(Component);\n\nFormUser.contextType = i18nContext;\nFormUser.contextType = i18nContext;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var cart = state.cart,\n      user = state.user;\n  return {\n    cart: cart,\n    user: user\n  };\n};\n\nexport default connect(mapStateToProps)(FormUser);","map":{"version":3,"sources":["/Users/wefed01/Sites/affx/public_html/react/src/pages/Cart/form.js"],"names":["React","Component","connect","i18nContext","fetchUser","Form","Input","FormUser","props","handleChange","event","target","value","type","checked","name","setState","info","state","handleSubmit","console","log","preventDefault","dispatch","user","i18n","context","form","fields","inputs","map","field","i","contextType","mapStateToProps","cart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from \"react-redux\"\nimport {i18nContext} from 'contexts/i18n';\nimport { fetchUser } from 'state/actions'\n\nimport { Form, Input } from \"components/Form/\";\n\nclass FormUser extends Component {\n  static contextType = i18nContext;\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      info: this.props.user.info\n    }\n  }\n\n  handleChange = (event) => {\n    const target = event.target;\n    const value =\n      target.type === 'checkbox'\n        ? target.checked\n        : target.value;\n    const name = target.name;\n\n    this.setState({ info:{\n      ...this.state.info,\n      [name]: value,\n    }});\n  }\n\n  handleSubmit = (event) => {\n    console.log('E\\' stato inserito un valore: ', this.state.info);\n    event.preventDefault();\n    this.props.dispatch( fetchUser( this.state.info ) )\n  }\n\n  render(){\n    let i18n = this.context;\n\n    console.log( i18n.form.name );\n    const fields = [{name:'name',type:'textarea'},\n                    {name:'phone'},\n                    {name:'address'},\n                    {name:'city'},\n                    {name:'zipcode'},\n                    {name:'email'}]\n    const inputs = fields.map((field, i) => ( <Input {...field}\n                                                     key={i}\n                                                     defaultValue={this.state.info[field.name]}\n                                                     onChange={this.handleChange} /> ));\n\n    return (\n      <React.Fragment>\n        <Form onSubmit={this.handleSubmit}>\n          {inputs}\n          \n        </Form>\n      </React.Fragment>\n    )\n  }\n}\n\nFormUser.contextType = i18nContext\nconst mapStateToProps = (state) => {\n  const { cart, user } = state\n  return { cart, user }\n}\nexport default connect(mapStateToProps)( FormUser );\n"]},"metadata":{},"sourceType":"module"}