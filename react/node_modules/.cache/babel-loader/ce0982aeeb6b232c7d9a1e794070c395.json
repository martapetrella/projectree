{"ast":null,"code":"// Store GCLID in Cookie and Send to Hubspot\n// Pass Tracking Parameters to a Form on Another Page Using GTM\n// http://zackphilipps.com/store-gclid-cookie-send-to-hubspot/\nimport { setTracker } from 'state/actions';\nimport { getTracker } from \"helpers/querystring\";\nimport { parseIfJsonString } from \"helpers/object_and_json\";\nimport { fetchCart } from 'state/actions';\nexport function getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + name + '=');\n  if (parts.length === 2) return parts.pop().split(';').shift();\n}\nexport function setCookie(name, value, days) {\n  if (value) {\n    var setDays = !isNaN(days) ? days : 30;\n    var strValue = typeof value === 'object' ? JSON.stringify(value) : value;\n    var date = new Date(); // setta la scadenza in giorni\n\n    date.setTime(date.getTime() + setDays * 24 * 60 * 60 * 1000);\n    var expires = '; expires=' + date.toGMTString();\n    document.cookie = name + '=' + strValue + expires + ';path=/';\n  }\n} // Qui vengono inizializzati i cookies\n\nexport function cookiesInit(componentProps) {\n  setTrackerCookies(componentProps);\n  setFormCookies();\n  setCartCookie(componentProps);\n} // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PRIVATES\n\nfunction setTrackerCookies(componentProps) {\n  // recupero la querystring\n  var querystring = require('query-string').parse(componentProps.location.search); // setto il trackid e descrivo se è google o bing (usando l'helper apposito)\n\n\n  var tracker = getTracker(querystring); // se c'è il trackid nella querystring, lo setto nel cookie\n\n  if (tracker.trackid) setCookie('tracker', tracker);\n  var myCookieStr = getCookie('tracker');\n  var myCookie = parseIfJsonString(myCookieStr); // salvo nello stato globale il cookie per poterlo passare alla form\n\n  if (myCookie && myCookie.trackid) componentProps.dispatch(setTracker(myCookie));\n} // setta tutti i cookie che passano i valori alla form prendendo la stringa randomica\n\n\nfunction setFormCookies() {\n  var abTest = getCookie('abTest');\n\n  if (!abTest || abTest === '{}') {\n    setCookie('abTest', ABTestCreateRamdoms());\n  }\n} // setta il cookie del carrello\n\n\nfunction setCartCookie(componentProps) {\n  var cookieCart = parseIfJsonString(getCookie('cart'));\n  componentProps.dispatch(fetchCart(cookieCart.list));\n} // qui elenco tutti i valori in get che passerano ai cookie\n// e che a loro volta verranno passato alla form.\n// sono dei valori decisi randomicamente da una lista (TODO: creare lista con Marco)\n\n\nfunction ABTestCreateRamdoms() {\n  return {//btnlabel : 'Procedi',\n    //btnbkg : '#0f0',\n    //btncolor : '#00f',\n    //btnbordercolor : '#ff0'\n  };\n}","map":{"version":3,"sources":["/Users/wefed01/Sites/affx/public_html/react/src/helpers/cookies.js"],"names":["setTracker","getTracker","parseIfJsonString","fetchCart","getCookie","name","value","document","cookie","parts","split","length","pop","shift","setCookie","days","setDays","isNaN","strValue","JSON","stringify","date","Date","setTime","getTime","expires","toGMTString","cookiesInit","componentProps","setTrackerCookies","setFormCookies","setCartCookie","querystring","require","parse","location","search","tracker","trackid","myCookieStr","myCookie","dispatch","abTest","ABTestCreateRamdoms","cookieCart","list"],"mappings":"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","sourcesContent":["// Store GCLID in Cookie and Send to Hubspot\n// Pass Tracking Parameters to a Form on Another Page Using GTM\n// http://zackphilipps.com/store-gclid-cookie-send-to-hubspot/\n\nimport { setTracker } from 'state/actions'\nimport { getTracker } from \"helpers/querystring\"\nimport { parseIfJsonString } from \"helpers/object_and_json\"\nimport { fetchCart } from 'state/actions'\n\n\nexport function getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + name + '=');\n  if (parts.length === 2)\n    return parts.pop().split(';').shift();\n}\n\nexport function setCookie(name, value, days) {\n  if( value ) {\n    let setDays = ( !isNaN(days) ) ? days : 30;\n    let strValue = ( typeof value === 'object' ) ? JSON.stringify(value) : value\n    var date = new Date();\n    // setta la scadenza in giorni\n    date.setTime(date.getTime() + (setDays * 24 * 60 * 60 * 1000));\n    var expires = '; expires=' + date.toGMTString();\n    document.cookie = name + '=' + strValue + expires + ';path=/';\n  }\n}\n\n// Qui vengono inizializzati i cookies\nexport function cookiesInit(componentProps) {\n  setTrackerCookies(componentProps)\n  setFormCookies()\n  setCartCookie(componentProps)\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PRIVATES\n\nfunction setTrackerCookies(componentProps) {\n  // recupero la querystring\n  const querystring = require('query-string').parse(componentProps.location.search);\n  // setto il trackid e descrivo se è google o bing (usando l'helper apposito)\n  const tracker = getTracker(querystring);\n  // se c'è il trackid nella querystring, lo setto nel cookie\n  if(tracker.trackid) setCookie('tracker',tracker)\n  const myCookieStr = getCookie('tracker')\n  const myCookie = parseIfJsonString(myCookieStr)\n  // salvo nello stato globale il cookie per poterlo passare alla form\n  if( myCookie && myCookie.trackid ) componentProps.dispatch( setTracker( myCookie ) )\n}\n\n// setta tutti i cookie che passano i valori alla form prendendo la stringa randomica\nfunction setFormCookies() {\n  let abTest = getCookie('abTest')\n  if( !abTest || abTest==='{}' ) {\n    setCookie('abTest',ABTestCreateRamdoms())\n  }\n}\n\n// setta il cookie del carrello\nfunction setCartCookie(componentProps) {\n  const cookieCart = parseIfJsonString( getCookie('cart') )\n  componentProps.dispatch( fetchCart(cookieCart.list) )\n\n\n}\n\n// qui elenco tutti i valori in get che passerano ai cookie\n// e che a loro volta verranno passato alla form.\n// sono dei valori decisi randomicamente da una lista (TODO: creare lista con Marco)\nfunction ABTestCreateRamdoms() {\n  return {\n    //btnlabel : 'Procedi',\n    //btnbkg : '#0f0',\n    //btncolor : '#00f',\n    //btnbordercolor : '#ff0'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}