{"ast":null,"code":"// Store GCLID in Cookie and Send to Hubspot\n// Pass Tracking Parameters to a Form on Another Page Using GTM\n// http://zackphilipps.com/store-gclid-cookie-send-to-hubspot/\nimport { setTracker } from 'state/actions';\nimport { getTrackerObj } from \"helpers/querystring\";\nimport { parseIfJsonString } from \"helpers/object_and_json\";\nimport { fetchCart } from 'state/actions';\nimport { f_trimall } from \"helpers/formatter\"; // REACT_APP_NAME // string = string.replace(/[^a-zA-Z0-9]/g, '');\n\nexport function getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + cookiePrefixer(name) + '=');\n  if (parts.length === 2) return parts.pop().split(';').shift();\n}\nexport function setCookie(name, value, days, callback) {\n  if (value) {\n    var setDays = !isNaN(days) ? days : 30;\n    var strValue = typeof value === 'object' ? JSON.stringify(value) : value;\n    var date = new Date(); // setta la scadenza in giorni\n\n    date.setTime(date.getTime() + setDays * 24 * 60 * 60 * 1000);\n    var expires = '; expires=' + date.toGMTString();\n    document.cookie = cookiePrefixer(name) + '=' + strValue + expires + ';path=/'; // se presente, lancia una callback\n\n    if (callback) callback();\n  }\n} // Qui vengono inizializzati i cookies\n\nexport function cookiesInit(componentProps) {\n  setStateAndCookieFromQuery_tracker(componentProps);\n  setStateFromCookie('cart', fetchCart, 'list', componentProps); //setStateFromCookie('user',fetchUser,'list',componentProps)\n  //setStateFromCookie_abTest(componentProps) // rifare funzione usando setStateFromCookie()\n} // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PRIVATES\n// Imposta il prefisso dei nomi dei cookie in set e get\n\nfunction cookiePrefixer(name) {\n  return f_trimall(process.env.REACT_APP_NAME).toLowerCase() + '_' + name;\n} // Aggiorna lo stato globale in base a un cookie\n\n\nfunction setStateFromCookie(cookieName, actionToDispatch, valueInObj, componentProps) {\n  var obj = parseIfJsonString(getCookie(cookieName));\n  if (obj[valueInObj]) componentProps.dispatch(actionToDispatch(obj[valueInObj]));\n  if (!valueInObj) componentProps.dispatch(actionToDispatch(obj));\n} // Aggiorna Cookie e Stato in base a un parametro in query (per tracker)\n\n\nfunction setStateAndCookieFromQuery_tracker(componentProps) {\n  // setto il trackid e indico se è google o bing (usando l'helper apposito)\n  var tracker = getTrackerObj(componentProps.location.search);\n\n  if (tracker) {\n    // setta il cookie\n    setCookie('tracker', tracker, function () {\n      // setta lo stato in base al cookie (callback del set cookie)\n      setStateFromCookie('tracker', setTracker, false, componentProps);\n    });\n  }\n}\n/*\n// TODO: ABILITARE QUI E IN cookiesInit() QUANDO SVILUPPERO' GLI ABTEST\n\n// setta tutti i cookie che passano i valori alla form prendendo la stringa randomica\nfunction setStateFromCookie_abTest() {\n  let abTest = getCookie('abTest')\n  if( !abTest || abTest==='{}' ) {\n    setCookie('abTest',ABTestCreateRamdoms())\n  }\n}\n\n// qui elenco tutti i valori in get che passerano ai cookie\n// e che a loro volta verranno passato alla form.\n// sono dei valori decisi randomicamente da una lista (TODO: creare lista con Marco)\nfunction ABTestCreateRamdoms() {\n  return {\n    //btnlabel : 'Procedi',\n    //btnbkg : '#0f0',\n    //btncolor : '#00f',\n    //btnbordercolor : '#ff0'\n  }\n}\n*/","map":{"version":3,"sources":["/Users/wefed01/Sites/affx/public_html/react/src/helpers/cookies.js"],"names":["setTracker","getTrackerObj","parseIfJsonString","fetchCart","f_trimall","getCookie","name","value","document","cookie","parts","split","cookiePrefixer","length","pop","shift","setCookie","days","callback","setDays","isNaN","strValue","JSON","stringify","date","Date","setTime","getTime","expires","toGMTString","cookiesInit","componentProps","setStateAndCookieFromQuery_tracker","setStateFromCookie","process","env","REACT_APP_NAME","toLowerCase","cookieName","actionToDispatch","valueInObj","obj","dispatch","tracker","location","search"],"mappings":"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","sourcesContent":["// Store GCLID in Cookie and Send to Hubspot\n// Pass Tracking Parameters to a Form on Another Page Using GTM\n// http://zackphilipps.com/store-gclid-cookie-send-to-hubspot/\n\nimport { setTracker } from 'state/actions'\nimport { getTrackerObj } from \"helpers/querystring\"\nimport { parseIfJsonString } from \"helpers/object_and_json\"\nimport { fetchCart } from 'state/actions'\nimport { f_trimall } from \"helpers/formatter\"\n\n// REACT_APP_NAME // string = string.replace(/[^a-zA-Z0-9]/g, '');\n\nexport function getCookie(name) {\n  var value = '; ' + document.cookie;\n  var parts = value.split('; ' + cookiePrefixer(name) + '=');\n  if (parts.length === 2)\n    return parts.pop().split(';').shift();\n}\n\nexport function setCookie(name, value, days, callback) {\n  if( value ) {\n    let setDays = ( !isNaN(days) ) ? days : 30;\n    let strValue = ( typeof value === 'object' ) ? JSON.stringify(value) : value\n    var date = new Date();\n    // setta la scadenza in giorni\n    date.setTime(date.getTime() + (setDays * 24 * 60 * 60 * 1000));\n    var expires = '; expires=' + date.toGMTString();\n    document.cookie = cookiePrefixer(name) + '=' + strValue + expires + ';path=/';\n    // se presente, lancia una callback\n    if( callback ) callback();\n  }\n}\n\n// Qui vengono inizializzati i cookies\nexport function cookiesInit(componentProps) {\n  setStateAndCookieFromQuery_tracker(componentProps)\n  setStateFromCookie('cart',fetchCart,'list',componentProps)\n  //setStateFromCookie('user',fetchUser,'list',componentProps)\n  //setStateFromCookie_abTest(componentProps) // rifare funzione usando setStateFromCookie()\n}\n\n// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// PRIVATES\n\n// Imposta il prefisso dei nomi dei cookie in set e get\nfunction cookiePrefixer(name) {\n  return f_trimall(process.env.REACT_APP_NAME).toLowerCase() + '_' + name;\n}\n\n// Aggiorna lo stato globale in base a un cookie\nfunction setStateFromCookie(cookieName,actionToDispatch,valueInObj,componentProps) {\n  const obj = parseIfJsonString( getCookie(cookieName) )\n  if( obj[valueInObj] ) componentProps.dispatch( actionToDispatch(obj[valueInObj]) )\n  if( !valueInObj ) componentProps.dispatch( actionToDispatch(obj) )\n}\n\n// Aggiorna Cookie e Stato in base a un parametro in query (per tracker)\nfunction setStateAndCookieFromQuery_tracker(componentProps) {\n  // setto il trackid e indico se è google o bing (usando l'helper apposito)\n  const tracker = getTrackerObj( componentProps.location.search );\n  if( tracker ) {\n    // setta il cookie\n    setCookie('tracker',tracker, function(){\n      // setta lo stato in base al cookie (callback del set cookie)\n      setStateFromCookie('tracker',setTracker,false,componentProps)\n    })\n\n  }\n}\n\n/*\n// TODO: ABILITARE QUI E IN cookiesInit() QUANDO SVILUPPERO' GLI ABTEST\n\n// setta tutti i cookie che passano i valori alla form prendendo la stringa randomica\nfunction setStateFromCookie_abTest() {\n  let abTest = getCookie('abTest')\n  if( !abTest || abTest==='{}' ) {\n    setCookie('abTest',ABTestCreateRamdoms())\n  }\n}\n\n// qui elenco tutti i valori in get che passerano ai cookie\n// e che a loro volta verranno passato alla form.\n// sono dei valori decisi randomicamente da una lista (TODO: creare lista con Marco)\nfunction ABTestCreateRamdoms() {\n  return {\n    //btnlabel : 'Procedi',\n    //btnbkg : '#0f0',\n    //btncolor : '#00f',\n    //btnbordercolor : '#ff0'\n  }\n}\n*/\n"]},"metadata":{},"sourceType":"module"}